#!/usr/bin/python
# coding=utf-8
# -*- coding: utf-8 -*-

import re
import os, sys
import requests
import vk_api
import random
from bs4 import BeautifulSoup

from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from vk_api.utils import get_random_id

vk_session = vk_api.VkApi(token='9f480882c352f231188eb392272c579391cd22752abfa7c9d7c063f6efd6a64581e241e552dd99e11e974')
longpoll = VkLongPoll(vk_session)
vk = vk_session.get_api()

sessions = {}

keyboard = VkKeyboard(one_time=False)
keyboard.add_button('üë§ –ü—Ä–æ—Ñ–∏–ª—å', color=VkKeyboardColor.POSITIVE)
keyboard.add_line()
keyboard.add_button('üìó –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏', color=VkKeyboardColor.PRIMARY)
keyboard.add_button('üèÜ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏', color=VkKeyboardColor.PRIMARY)
keyboard.add_line()
keyboard.add_button('üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', color=VkKeyboardColor.PRIMARY)
keyboard.add_line()
keyboard.add_button('üìî –î–Ω–µ–≤–Ω–∏–∫', color=VkKeyboardColor.NEGATIVE)

inlineKeyboard = VkKeyboard(one_time=False, inline=True)
inlineKeyboard.add_button(
        label="–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è",
        color=VkKeyboardColor.PRIMARY,
        payload={"action": "text", "label":"–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è"},
    )

def sendMessage(user_id, text, kb = keyboard):
    vk.messages.send(
        random_id=get_random_id(),
        user_id=user_id,
        message=text,
        keyboard=kb.get_keyboard())


def parse(regexp, input, id = -99):
    if id == -99:
        id = 1
        match = re.compile(regexp).search(input)
        print(match.group((id)).encode("utf-8").decode("utf-8"))
        return match.group(id)
    else:
        match = re.compile(regexp).findall(input)
        print(match)
        return match[id]


for event in longpoll.listen():
    try:

        print(event.raw)
        if event.type == VkEventType.MESSAGE_NEW and event.to_me and event.text:
            peer_id = event.peer_id
            cmd = str(event.text).split(" ")
            if cmd[0] == '/login':
                try:
                    sendMessage(peer_id, "–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è..")
                    sessions[peer_id] = requests.session()
                    sessions[peer_id].headers = {'Content-Type': 'application/x-www-form-urlencoded'}

                    payload = "username=" + cmd[1] + "&password=" + cmd[2] + "&return_uri=/"
                    auth = sessions[peer_id].post('https://riso.sev.gov.ru/ajaxauthorize', data=payload)

                    if auth.json()['result']:
                        mainPage = sessions[peer_id].get("https://riso.sev.gov.ru" + auth.json()['actions'][0]['url'])
                        username = parse("<div class=\"navigation-top-item__label\">(.*?)</div>", mainPage.content.decode("utf-8"), 2)
                        txt = "‚úÖ –ü—Ä–∏–≤–µ—Ç, " + username + " –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∏—Å, –Ω–µ –≤—ã—Ö–æ–¥—è –∏–∑ —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏!"
                        sendMessage(peer_id, txt)
                    else:
                        sendMessage(peer_id, "üôÖ –ù–µ—É–¥–∞—á–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è, –≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å!")

                except NameError:
                    print("Error: " + str(sys.exc_info()[0]))
                    sendMessage(peer_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")
                except IndexError:
                    sendMessage(peer_id, "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == '–ù–∞—á–∞—Ç—å':
                sendMessage(peer_id, '‚úçÔ∏è –ë–æ—Ç –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç—Ñ–æ—Ä–º–æ–π —Ä–ò–°–æ.\n\nüí¨ –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –¥–ª—è –Ω–∞—á–∞–ª–∞: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]\n\n' \
                             + '–°–º–µ–Ω–∞ –ø–∞—Ä–æ–ª—è –≤–æ–∑–º–æ–∂–Ω–∞ —Ç—É—Ç: https://riso.sev.gov.ru/journal-user-security-action')
            if event.text == 'üë§ –ü—Ä–æ—Ñ–∏–ª—å':
                try:
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru")
                    soup = BeautifulSoup(mainPage.content)
                    title = parse("<div class=\"logo__title\">(.*?)</div>",
                                  mainPage.content.decode("utf-8"))
                    city = parse("<div class=\"logo__subtitle\">(.*?)</div>",
                                 mainPage.content.decode("utf-8"))
                    username = parse("<div class=\"navigation-top-item__label\">(.*?)</div>",
                                     mainPage.content.decode("utf-8"),
                                     2)

                    journalPage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-student-monitoring-action")
                    jpage = BeautifulSoup(journalPage.content)
                    midValue = parse(" class=\"green\">(.*?)<span class=\"value-arrow\">",
                                     journalPage.content.decode("utf-8"))
                    mustDo = parse("<div class=\"page-empty page-empty--small\">(.*?)</div>",
                                   journalPage.content.decode("utf-8"))
                    currCategoryTitle = jpage.find("h5").text
                    currCategory = ""
                    try:
                        currCategory = jpage.find("div", "lgray").text
                    except:
                        currCategory = ""

                    schedulePage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-schedule-action")
                    c_group = BeautifulSoup(schedulePage.content)
                    uGroup = c_group.find("h1").text
                    msg = "üè´ –£—á–µ–±–Ω–æ–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏–µ: " + title + "\n" + \
                          "üåÜ –ì–æ—Ä–æ–¥: " + city + "\n" + "\n" \
                          "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: " + username + "\n" + \
                          "üë• –ì—Ä—É–ø–ø–∞: " + uGroup + "\n\n" + \
                          "üëç –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: " + midValue + "\n" + \
                          "‚õîÔ∏è –î–æ–ª–≥–∏: " + mustDo + "\n" + \
                          "üóí –¢–µ–∫—É—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è: " + currCategoryTitle + " - " + currCategory
                    sendMessage(peer_id, msg)
                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == "üìî –î–Ω–µ–≤–Ω–∏–∫":
                try:
                    msg = 'üìî –î–Ω–µ–≤–Ω–∏–∫ \n\n'
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-app/")

                    soup = BeautifulSoup(mainPage.content)
                    for each_div in soup.findAll('div', {'class': 'dnevnik-day'}):
                        day = "‚≠ê  " + each_div.find("div", "dnevnik-day__title").text.replace("\n", "").replace(
                            "                ", "")
                        lessons = ""
                        for lesson in each_div.findAll('div', {'class': 'dnevnik-lesson'}):
                            id = lesson.find("div", "dnevnik-lesson__number dnevnik-lesson__number--time").text.replace(
                                "\n", "").replace(" ", "")
                            time = lesson.find("div", "dnevnik-lesson__time").text.replace("\n", "").replace(" ", "")
                            lesson.find("div", "dnevnik-lesson__time").decompose()
                            subject = lesson.find("div", "dnevnik-lesson__subject").text.replace("\n", "").replace(
                                "                                    ", ""). \
                                replace("        ", "")
                            marks = lesson.find("div", "dnevnik-lesson__marks").text.replace("\n", "").replace(" ", "")
                            lessons += (id + " " + time + " - " + subject + " - " + marks) + "\n"
                        if lessons == "":
                            lessons = "---\n"
                        msg += day + "\n" + lessons + "\n";

                    sendMessage(peer_id, msg, inlineKeyboard)

                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == "–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è":
                try:
                    msg = 'üìî –î–Ω–µ–≤–Ω–∏–∫ \n\n'
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-app/week.-1")

                    soup = BeautifulSoup(mainPage.content)
                    for each_div in soup.findAll('div', {'class': 'dnevnik-day'}):
                        day = "‚≠ê  " + each_div.find("div", "dnevnik-day__title").text.replace("\n", "").replace(
                            "                ", "")
                        lessons = ""
                        for lesson in each_div.findAll('div', {'class': 'dnevnik-lesson'}):
                            id = lesson.find("div", "dnevnik-lesson__number dnevnik-lesson__number--time").text.replace(
                                "\n", "").replace(" ", "")
                            time = lesson.find("div", "dnevnik-lesson__time").text.replace("\n", "").replace(" ", "")
                            lesson.find("div", "dnevnik-lesson__time").decompose()
                            subject = lesson.find("div", "dnevnik-lesson__subject").text.replace("\n", "").replace(
                                "                                    ", ""). \
                                replace("        ", "")
                            marks = lesson.find("div", "dnevnik-lesson__marks").text.replace("\n", "").replace(" ", "")
                            lessons += (id + " " + time + " - " + subject + " - " + marks) + "\n"
                        if lessons == "":
                            lessons = "---\n"
                        msg += day + "\n" + lessons + "\n";

                    sendMessage(peer_id, msg, inlineKeyboard)

                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == 'üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ':
                try:
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-schedule-action/")
                    soup = BeautifulSoup(mainPage.content)
                    msg = 'üìñ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é: \n\n'
                    for each_div in soup.findAll('div', {'class': 'schedule__day'}):
                        name = each_div.contents[1].find_all('div', class_='column-40')[0].text
                        name = "‚≠ê  " + name.replace("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:").replace("–í—Ç–æ—Ä–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫:").\
                                                     replace("–°—Ä–µ–¥–∞", "–°—Ä–µ–¥–∞:").replace("–ß–µ—Ç–≤–µ—Ä–≥", "–ß–µ—Ç–≤–µ—Ä–≥:").\
                                                     replace("–ü—è—Ç–Ω–∏—Ü–∞", "–ü—è—Ç–Ω–∏—Ü–∞:").replace("–°—É–±–±–æ—Ç–∞", "–°—É–±–±–æ—Ç–∞:").\
                                                     replace("\n", "")
                        lessons = ""
                        i = 1
                        for lesson in each_div.findAll('span', {'class': 'schedule-lesson'}):
                            i += 1
                            if i % 2 == 0:
                                lessons += lesson.text + "\n"

                        if lessons == "":
                            lessons = "---\n"
                        msg += name + "\n" + lessons + "\n"

                    sendMessage(peer_id, msg)
                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == 'üèÜ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏':
                try:
                    msg = "üèÜ –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ —É—Ä–æ–∫–∞–º: \n\n"
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru/journal-student-monitoring-action")
                    soup = BeautifulSoup(mainPage.content)
                    for each_div in soup.findAll('table',
                                                 {'class': 'ej-table ej-table--100percent ej-table--colored-lines'}):
                        obj = each_div.contents[3].findAll('tr')
                        for item in obj:
                            mark = item.span.text
                            if mark == "":
                                mark = "N/A"
                            msg += item.td.text + " - " + mark + "\n"

                    sendMessage(peer_id, msg)
                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")


            if event.text == 'üìó –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏':
                try:
                    mainPage = sessions[peer_id].get("https://riso.sev.gov.ru")
                    txt = "üìó –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏: \n\n"
                    soup = BeautifulSoup(mainPage.content)
                    for each_div in soup.findAll('li', {'class': 'ej-accordion ej-accordion--expanded'}):
                        name = each_div.contents[1].find("div", "ej-accordion__title green").text
                        mark = each_div.contents[3].text.replace(" ", "").replace("\n", "").replace(",", ", ").replace("(",
                                                                                                                       " (")
                        txt += name + " - " + mark + "\n"

                    sendMessage(peer_id, txt)
                except KeyError:
                    sendMessage(peer_id, "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è: /login [–õ–æ–≥–∏–Ω] [–ü–∞—Ä–æ–ª—å]")

            if event.text == '/test':
                sendMessage(peer_id, "works")

            if event.text == '/stop':
                sys.exit()
    except NameError:
        print('An exception occurred');